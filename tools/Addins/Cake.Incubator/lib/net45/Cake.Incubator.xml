<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cake.Incubator</name>
    </assembly>
    <members>
        <member name="T:Cake.Incubator.AssertExtensions">
            <summary>
            Contains extensions for guard clauses
            </summary>
        </member>
        <member name="M:Cake.Incubator.AssertExtensions.ThrowIfNull``1(``0,System.String)">
            <summary>
            Throws a <see cref="T:System.ArgumentNullException"/> if the value is null, otherwise returns the value
            </summary>
            <typeparam name="T">The type to return</typeparam>
            <param name="value">The object to check</param>
            <param name="varName">The name of the variable</param>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <returns>The non-null value</returns>
            <example>
            replace the following
            <code>
            if (myArg == null) 
            {
              throw new ArgumentNullException(nameof(myArg));
            }
            var arg1 = myArg;
            </code>
            with 
            <code>
            var arg1 = myArg.ThrowIfNull(nameof(myArg));
            </code>
            </example>
        </member>
        <member name="M:Cake.Incubator.AssertExtensions.ThrowIfNull``1(``0,System.String,System.String)">
            <summary>
            Throws a <see cref="T:System.ArgumentNullException"/> with a specific message if the value is null, otherwise returns the value
            </summary>
            <typeparam name="T">The type to return</typeparam>
            <param name="value">The object to check</param>
            <param name="varName">The name of the variable</param>
            <param name="message">The exception message</param>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <returns>The non-null value</returns>
            <example>
            replace the following
            <code>
            if (myArg == null) 
            {
              throw new ArgumentNullException(nameof(myArg), "Oops");
            }
            var arg1 = myArg;
            </code>
            with 
            <code>
            var arg1 = myArg.ThrowIfNull(nameof(myArg), "Oops");
            </code>
            </example>
        </member>
        <member name="M:Cake.Incubator.AssertExtensions.ThrowIfNullOrEmpty(System.String,System.String)">
            <summary>
            Throws a <see cref="T:System.ArgumentNullException"/> if a string is null or empty, otherwise returns the value
            </summary>
            <typeparam name="T">The type to return</typeparam>
            <param name="value">The object to check</param>
            <param name="varName">The name of the variable</param>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <returns>The non-null value</returns>
            <example>
            replace the following
            <code>
            string myArg = "";
            if (string.IsNullOrEmpty(myArg)) 
            {
              throw new ArgumentNullException(nameof(myArg));
            }
            var arg1 = myArg;
            </code>
            with 
            <code>
            string myArg = "";
            var arg1 = myArg.ThrowIfNullOrEmpty(nameof(myArg));
            </code>
            </example>
        </member>
        <member name="T:Cake.Incubator.CustomProjectParserResult">
            <summary>Represents the content in an MSBuild project file.</summary>
        </member>
        <member name="P:Cake.Incubator.CustomProjectParserResult.Configuration">
            <summary>Gets the build configuration.</summary>
            <value>The build configuration.</value>
        </member>
        <member name="P:Cake.Incubator.CustomProjectParserResult.Platform">
            <summary>Gets the target platform.</summary>
            <value>The platform.</value>
        </member>
        <member name="P:Cake.Incubator.CustomProjectParserResult.ProjectGuid">
            <summary>Gets the unique project identifier.</summary>
            <value>The unique project identifier.</value>
        </member>
        <member name="P:Cake.Incubator.CustomProjectParserResult.ProjectTypeGuids">
            <summary>Gets the project type identifiers.</summary>
            <value>The project type identifiers.</value>
        </member>
        <member name="P:Cake.Incubator.CustomProjectParserResult.OutputType">
            <summary>
            Gets the compiler output type, i.e. <c>Exe/Library</c>.
            </summary>
            <value>The output type.</value>
        </member>
        <member name="P:Cake.Incubator.CustomProjectParserResult.OutputPath">
            <summary>Gets the compiler output path.</summary>
            <value>The output path.</value>
        </member>
        <member name="P:Cake.Incubator.CustomProjectParserResult.RootNameSpace">
            <summary>Gets the default root namespace.</summary>
            <value>The root namespace.</value>
        </member>
        <member name="P:Cake.Incubator.CustomProjectParserResult.AssemblyName">
            <summary>Gets the build target assembly name.</summary>
            <value>The assembly name.</value>
        </member>
        <member name="P:Cake.Incubator.CustomProjectParserResult.TargetFrameworkVersion">
            <summary>Gets the compiler target framework version.</summary>
            <value>The target framework version.</value>
        </member>
        <member name="P:Cake.Incubator.CustomProjectParserResult.TargetFrameworkProfile">
            <summary>Gets the compiler target framework profile.</summary>
            <value>The target framework profile.</value>
        </member>
        <member name="P:Cake.Incubator.CustomProjectParserResult.Files">
            <summary>Gets the project content files.</summary>
            <value>The files.</value>
        </member>
        <member name="P:Cake.Incubator.CustomProjectParserResult.References">
            <summary>Gets the references.</summary>
            <value>The references.</value>
        </member>
        <member name="P:Cake.Incubator.CustomProjectParserResult.ProjectReferences">
            <summary>Gets the references to other projects.</summary>
            <value>The references.</value>
        </member>
        <member name="M:Cake.Incubator.CustomProjectParserResult.#ctor(System.String,System.String,System.String,System.String[],System.String,Cake.Core.IO.DirectoryPath,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Cake.Incubator.CustomProjectFile},System.Collections.Generic.IEnumerable{Cake.Common.Solution.Project.ProjectAssemblyReference},System.Collections.Generic.IEnumerable{Cake.Common.Solution.Project.ProjectReference})">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Solution.Project.ProjectParserResult" /> class.
            </summary>
            <param name="configuration">The build configuration.</param>
            <param name="platform">The target platform.</param>
            <param name="projectGuid">The unique project identifier.</param>
            <param name="projectTypeGuids">The project type identifiers</param>
            <param name="outputType">The compiler output type.</param>
            <param name="outputPath">The compiler output path</param>
            <param name="rootNameSpace">The default root namespace.</param>
            <param name="assemblyName">Gets the build target assembly name.</param>
            <param name="targetFrameworkVersion">The compiler framework version.</param>
            <param name="targetFrameworkProfile">The compiler framework profile.</param>
            <param name="files">The project content files.</param>
            <param name="references">The references.</param>
            <param name="projectReferences">The references to other projects.</param>
        </member>
        <member name="M:Cake.Incubator.DirectoryExtensions.TransferDirectory(Cake.Core.ICakeContext,Cake.Core.IO.DirectoryPath,Cake.Core.IO.DirectoryPath)">
            <summary>
            Obsolete: Use Cake.Common.IO.CopyDirectory instead
            </summary>
            <param name="context">The context</param>
            <param name="source">The source directory</param>
            <param name="destination">The destination directory</param>
            <exception cref="T:Cake.Core.CakeException">Throws if source directory does not exist</exception>
            <exception cref="T:Cake.Core.CakeException">Throws if destination directory does exist</exception>
        </member>
        <member name="M:Cake.Incubator.DotNetCoreTestExtensions.DotNetCoreTest(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Common.Tools.XUnit.XUnit2Settings)">
            <summary>
            Runs DotNetCoreTest using the given <see cref="T:Cake.Common.Tools.XUnit.XUnit2Settings"/>
            </summary>
            <param name="context">The Cake Context</param>
            <param name="project">DotNetCore Test Project File Path</param>
            <param name="xunitSettings">XUnit2 DotNetCore Test Settings Configurer</param>
        </member>
        <member name="M:Cake.Incubator.DotNetCoreTestExtensions.DotNetCoreTest(Cake.Core.ICakeContext,Cake.Common.Tools.DotNetCore.Test.DotNetCoreTestSettings,Cake.Core.IO.FilePath,Cake.Common.Tools.XUnit.XUnit2Settings)">
            <summary>
            Appends <see cref="T:Cake.Common.Tools.XUnit.XUnit2Settings"/> to an <see cref="T:Cake.Common.Tools.DotNetCore.Test.DotNetCoreTestSettings"/> instance
            </summary>
            <param name="context">The Cake Context</param>
            <param name="settings">DotNetCore Test Settings</param>
            <param name="project">DotNetCore Test Project Path</param>
            <param name="xunitSettings">XUnit2 DotNetCore Test Settings Configurer</param>
        </member>
        <member name="M:Cake.Incubator.EnvironmentExtensions.EnvironmentVariable``1(Cake.Core.ICakeContext,System.String)">
            <summary>
            Retrieves the value of the environment variable or throws a <see cref="T:Cake.Core.CakeException"/> if the argument is missing
            </summary>
            <typeparam name="T">The type of the environment variable</typeparam>
            <param name="context">The context.</param>
            <param name="variable">The environment variable name.</param>
            <exception cref="T:Cake.Core.CakeException">Environment variable value is null.</exception>
            <example>
            Returns the build number integer
            <code>
            var buildNumber = EnvironmentVariable&lt;int&gt;("BUILD_NUMBER");
            </code>
            </example>
        </member>
        <member name="M:Cake.Incubator.EnvironmentExtensions.EnvironmentVariable``1(Cake.Core.ICakeContext,System.String,``0)">
            <summary>
            Retrieves the value of the environment variable or returns the default value specified if missing
            </summary>
            <typeparam name="T">The type of the environment variable</typeparam>
            <param name="context">The context.</param>
            <param name="variable">The environment variable name.</param>
            <param name="defaultValue">The value to return if the environment variable is missing.</param>
            <returns>The value of the argument if it exist; otherwise <paramref name="defaultValue"/>.</returns>
            <example>
            Returns the build number integer, defaulting to 1 if unspecified
            <code>
            var buildNumber = EnvironmentVariable&lt;int&gt;("BUILD_NUMBER", 1);
            </code>
            </example>
        </member>
        <member name="M:Cake.Incubator.FileExtensions.Filter(Cake.Core.IO.FilePathCollection,System.String[])">
            <summary>
            Filters FilePathCollection by filenames, in the order specified
            </summary>
            <param name="filePathCollection">the collection to filter</param>
            <param name="fileNames">the file names to filter by</param>
            <returns>the filtered list</returns>
        </member>
        <member name="M:Cake.Incubator.FileExtensions.GetMatchingFiles(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
             <summary>
             Returns files in the same directory that have the same file name but different extensions
             </summary>
             <param name="context">the cake context</param>
             <param name="files">the files to return matches for</param>
             <returns>a list of matching files</returns>
             <example>
             Locates files with the same name in the same directory, but different extensions.
             The .pdb to your .dll as it were.
             <code>
             // /output/file.dll
             // /output/file.xml
             // /output/file.pdb
             // /output/another.dll
            
             IEnumerable&lt;FilePath&gt; matchingFiles = GetMatchingFiles(new FilePath("/output/file.dll"));
            
             matchingFiles[0]; // /output/file.xml
             matchingFiles[1]; // /output/file.pdb
             </code>
             </example>
        </member>
        <member name="M:Cake.Incubator.FileExtensions.GetFiles(Cake.Core.ICakeContext,System.String[])">
             <summary>
             Gets FliePaths using glob patterns
             </summary>
             <param name="context">the cake context</param>
             <param name="patterns">the glob patterns</param>
             <returns>the files matching the glob patterns</returns>
             <example>
             Locates files with the same name in the same directory, but different extensions.
             The .pdb to your .dll as it were.
             <code>
             // /output/file.dll
             // /output/file.xml
             // /output/file.pdb
             // /output/another.dll
            
             IEnumerable&lt;FilePath&gt; matchingFiles = GetMatchingFiles(new FilePath("/output/file.dll"));
            
             matchingFiles[0]; // /output/file.xml
             matchingFiles[1]; // /output/file.pdb
             </code>
             </example>
        </member>
        <member name="M:Cake.Incubator.FileExtensions.GetOutputAssemblies(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,System.String)">
             <summary>
             Gets the output assembly paths for solution or project files, for a specific build configuration
             </summary>
             <param name="context">the cake context</param>
             <param name="target">the solution or project file</param>
             <param name="configuration">the build configuration</param>
             <returns>the list of output assembly paths</returns>
             <exception cref="T:System.ArgumentException">Throws if the file is not a recognizable solution or project file</exception>
             <example>
             The project or solution's <see cref="T:Cake.Core.IO.FilePath"/> and the build configuration will 
             return the output file/s (dll or exe) for the project and return as an <see cref="T:System.Collections.Generic.IEnumerable`1"/>
             The alias expects a valid `.sln` or a `csproj` file.
            
             For a solution
             <code>
             // Solution output dll/exe's FilePath[] for 'Release' configuration
             IEnumerable&lt;FilePath&gt; filePaths = GetOutputAssemblies(new FilePath("test.sln"), "Release");
             </code>
             
             For a project
             <code>
             // Project output dll/exe as FilePath[] for 'Custom' configuration
             IEnumerable&lt;FilePath&gt; filePaths = GetOutputAssemblies(new FilePath("test.csproj"), "Custom");
             </code>
             </example>
        </member>
        <member name="M:Cake.Incubator.FileExtensions.GetSolutionAssemblies(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,System.String)">
            <summary>
            Gets the output assembly paths for a solution file, for a specific build configuration
            </summary>
            <param name="context">the cake context</param>
            <param name="target">the solution file</param>
            <param name="configuration">the build configuration</param>
            <returns>the list of output assembly paths</returns>
            <exception cref="T:System.ArgumentException">Throws if the file is not a recognizable solution file</exception>
            <example>
            The Solution's <see cref="T:Cake.Core.IO.FilePath"/> and the build configuration will return the 
            output files (dll or exe) for the projects and return as an <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            The alias expects a valid `.sln` file.
            <code>
            // Solution project's output dll/exe's for the 'Release' configuration
            IEnumerable&lt;FilePath&gt; filePaths = GetOutputAssemblies(new FilePath("test.sln"), "Release");
            </code>
            </example>
        </member>
        <member name="M:Cake.Incubator.FileExtensions.GetProjectAssembly(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,System.String)">
            <summary>
            Gets the output assembly path for a project file, for a specific build configuration
            </summary>
            <param name="context">the cake context</param>
            <param name="target">the project file</param>
            <param name="configuration">the build configuration</param>
            <returns>the output assembly path</returns>
            <exception cref="T:System.ArgumentException">Throws if the file is not a recognizable project file</exception>
            <example>
            The project's <see cref="T:Cake.Core.IO.FilePath"/> and the build configuration will return the 
            output file (dll or exe) for the project and return as a <see cref="T:Cake.Core.IO.FilePath"/>
            The alias expects a valid project file.
            <code>
            // Project output dll/exe as FilePath[] for 'Custom' configuration
            IEnumerable&lt;FilePath&gt; filePaths = GetOutputAssemblies(new FilePath("test.csproj"), "Custom");
            </code>
            </example>
        </member>
        <member name="M:Cake.Incubator.FileExtensions.Move(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Core.IO.FilePath)">
            <summary>
            Obsolete: Use Cake.Common.IO.MoveFile instead
            </summary>
            <param name="context">the cake context</param>
            <param name="source">the source file</param>
            <param name="destination">the destination file path</param>
        </member>
        <member name="M:Cake.Incubator.FileExtensions.Move(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Core.IO.DirectoryPath)">
            <summary>
            Obsolete: Use Cake.Common.IO.MoveFiles instead
            </summary>
            <param name="context"></param>
            <param name="source"></param>
            <param name="destination"></param>
        </member>
        <member name="M:Cake.Incubator.LoggingExtensions.Dump``1(``0)">
             <summary>
             Get a basic string representation of specified object.
             </summary>
             <typeparam name="T">Type of object</typeparam>
             <param name="obj">Object to generate string representation of</param>
             <returns>String representation of object in format in format `Prop: PropValue\r\nArrayProp: ArrayVal1, ArrayVal2`</returns>
             <example>
             Generates a string representation of objects public properties and values.
             <code>
             var person = new Person { Name = "Bob", Age = 24, Food = new[] { "Lasagne", "Pizza"} };
             var data = person.Dump();
            
             // output:
             "Name: Bob\r\nAge: 24\r\nFood: Lasagne, Pizza";
             </code>
             
             Useful in for logging objects, e.g.
             <code>
             var gitVersionResults = GitVersion(new GitVersionSettings());
             Information("GitResults -&gt; {0}", gitVersionResults.Dump());
            
             // output:
             GitResults -&gt; Major: 0
             Minor: 1
             Patch: 0
             PreReleaseTag: dev-19.1
             PreReleaseTagWithDash: -dev-19.1
             PreReleaseLabel: dev-19
             PreReleaseNumber: 1
             BuildMetaData: 26
             ..snip..
             </code>
             </example>
        </member>
        <member name="T:Cake.Incubator.ProjectType">
            <summary>
            Visual Studio project types
            </summary>
        </member>
        <member name="M:Cake.Incubator.StringExtensions.EqualsIgnoreCase(System.String,System.String)">
            <summary>
            Case-insensitive String.Equals
            </summary>
            <param name="source">the source string</param>
            <param name="value">the string to compare</param>
            <returns>true if strings are the same</returns>
        </member>
        <member name="M:Cake.Incubator.XDocumentExtensions.GetOutputPath(System.Xml.Linq.XDocument,System.String,System.String)">
            <summary>
            Gets the first output path value for a specific config from an xml document
            </summary>
            <param name="document">The xml document</param>
            <param name="config">the configuration</param>
            <param name="platform">the platform</param>
            <returns>the output path</returns>
        </member>
        <member name="M:Cake.Incubator.XDocumentExtensions.GetPlatformTarget(System.Xml.Linq.XDocument,System.String,System.String)">
            <summary>
            Gets the first platform target value for a specific config from an xml document
            </summary>
            <param name="document">The xml document</param>
            <param name="config">the configuration</param>
            <param name="platform">the platform</param>
            <returns>the platform target</returns>
        </member>
        <member name="M:Cake.Incubator.XDocumentExtensions.GetTargetFramework(System.Xml.Linq.XDocument)">
            <summary>
            Gets the first targetframework value from an xml document
            </summary>
            <param name="document">The xml document</param>
            <returns>the target framework</returns>
        </member>
        <member name="M:Cake.Incubator.XDocumentExtensions.IsDotNetSdk(System.Xml.Linq.XDocument)">
            <summary>
            Checks if an xml document for the dot net sdk attribute
            </summary>
            <param name="document">The xml document</param>
            <returns>True if attribute was found</returns>
        </member>
        <member name="M:Cake.Incubator.EnumerableExtensions.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs an action on a collection of items
            </summary>
            <typeparam name="T">The item type</typeparam>
            <param name="source">the collection</param>
            <param name="action">the action to perform</param>
            <example>
            Replace the following
            <code>
            foreach(var item in items) 
            {
              Debug.WriteLine(item);
            }
            </code>
            with
            <code>
            items.Each(item =&gt; Debug,WriteLine(item));
            </code>
            </example>
        </member>
        <member name="M:Cake.Incubator.EnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Checks whether specified IEnumerable is null or contains no elements
            </summary>
            <typeparam name="T">the item type</typeparam>
            <param name="source">the collection</param>
            <returns>true if element null or empty, else false</returns>
            <example>
            Replace
            <code>collection == null || !collection.Any()</code>
            with
            <code>collection.IsNullOrEmpty()</code>
            </example>
        </member>
        <member name="M:Cake.Incubator.EnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IList{``0})">
            <summary>
            Checks whether specified IList is null or contains no elements
            </summary>
            <typeparam name="T">the item type</typeparam>
            <param name="source">the collection</param>
            <returns>true if element null or empty, else false</returns>
            <example>
            Replace
            <code>collection == null || collection.Count == 0</code>
            with
            <code>collection.IsNullOrEmpty()</code>
            </example>
        </member>
        <member name="M:Cake.Incubator.EnumerableExtensions.IsNullOrEmpty``1(``0[])">
            <summary>
            Checks whether specified array is null or contains no elements
            </summary>
            <typeparam name="T">the item type</typeparam>
            <param name="source">the array</param>
            <returns>true if element null or empty, else false</returns>
            <example>
            Replace
            <code>collection == null || collection.Length == 0</code>
            with
            <code>collection.IsNullOrEmpty()</code>
            </example>
        </member>
        <member name="M:Cake.Incubator.CustomProjectParser.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Solution.Project.ProjectParser"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
        </member>
        <member name="M:Cake.Incubator.CustomProjectParser.Parse(Cake.Core.IO.FilePath,System.String)">
            <summary>
            Parses a project file for a specific configuration.
            </summary>
            <param name="projectPath">The project path.</param>
            <param name="config">The project configuration</param>
            <returns>The parsed project.</returns>
        </member>
        <member name="T:Cake.Incubator.CustomProjectFile">
            <summary>Represents a MSBuild project file.</summary>
        </member>
        <member name="P:Cake.Incubator.CustomProjectFile.FilePath">
            <summary>Gets or sets the project file path.</summary>
            <value>The project file path.</value>
        </member>
        <member name="P:Cake.Incubator.CustomProjectFile.RelativePath">
            <summary>Gets or sets the relative path to the project file.</summary>
            <value>The relative path to the project file.</value>
        </member>
        <member name="P:Cake.Incubator.CustomProjectFile.Compile">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Cake.Common.Solution.Project.ProjectFile" /> is compiled.
            </summary>
            <value>
              <c>true</c> if compiled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Cake.Incubator.DotNetBuildSettingsExtensions.WithTargets(Cake.Common.Tools.DotNetBuildSettings,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds multiple .NET build targets to the configuration.
            </summary>
            <param name="settings">The settings.</param>
            <param name="targets">The .NET build targets.</param>
            <returns>The same <see cref="T:Cake.Common.Tools.DotNetBuildSettings"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="T:Cake.Incubator.FilePathExtensions">
            <summary>
            Contains extension methods for working with <see cref="T:Cake.Core.IO.FilePath"/>'s
            </summary>
        </member>
        <member name="M:Cake.Incubator.FilePathExtensions.IsSolution(Cake.Core.IO.FilePath)">
            <summary>
            Checks if the FilePath is a solution file
            </summary>
            <param name="filePath">the path to check</param>
            <returns>true if sln file</returns>
        </member>
        <member name="M:Cake.Incubator.FilePathExtensions.IsProject(Cake.Core.IO.FilePath)">
            <summary>
            Checks if the FilePath is a csproj file
            </summary>
            <param name="filePath">the path to check</param>
            <returns>true if csproj or fsproj file</returns>
        </member>
        <member name="M:Cake.Incubator.FilePathExtensions.HasFileName(Cake.Core.IO.FilePath,System.String)">
            <summary>
            Checks if the path has a specific filename and extension
            </summary>
            <param name="path">the path to check</param>
            <param name="fileName">the file name and extension</param>
            <returns>true if filename and extension matches</returns>
        </member>
        <member name="M:Cake.Incubator.ProjectParserExtensions.IsLibrary(Cake.Incubator.CustomProjectParserResult)">
            <summary>
            Checks if the project is a library
            </summary>
            <param name="projectParserResult">the parsed project</param>
            <returns>true if the project is a library</returns>
        </member>
        <member name="M:Cake.Incubator.ProjectParserExtensions.GetExtension(Cake.Incubator.CustomProjectParserResult)">
            <summary>
            Returns the parsed projects output assembly extension
            </summary>
            <param name="projectParserResult">the parsed project</param>
            <returns>the output assembly's file extension</returns>
        </member>
        <member name="M:Cake.Incubator.ProjectParserExtensions.GetAssemblyFilePath(Cake.Incubator.CustomProjectParserResult)">
            <summary>
            Gets a parsed projects output assembly path
            </summary>
            <param name="projectParserResult">the parsed project</param>
            <returns>the output assembly path</returns>
        </member>
        <member name="M:Cake.Incubator.ProjectParserExtensions.IsType(Cake.Incubator.CustomProjectParserResult,Cake.Incubator.ProjectType)">
            <summary>
            Checks the parsed projects type
            </summary>
            <param name="projectParserResult">the parsed project</param>
            <param name="projectType">the project type to check</param>
            <returns>true if the project type matches</returns>
        </member>
        <member name="M:Cake.Incubator.ProjectParserExtensions.ParseProject(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,System.String)">
            <summary>
            Parses a csproj file into a strongly typed <see cref="T:Cake.Incubator.CustomProjectParserResult"/> object
            </summary>
            <param name="context">the cake context</param>
            <param name="project">the project filepath</param>
            <param name="configuration">the build configuration</param>
            <returns>The parsed project</returns>
        </member>
        <member name="T:Cake.Incubator.ProjectXElement">
            <summary>
            MSBuild Project Xml Element XNames
            original source: https://github.com/cake-build/cake/blob/main/src/Cake.Common/Solution/Project/ProjectXElement.cs
            </summary>
        </member>
        <member name="F:Cake.Incubator.ProjectXElement.Project">
            <summary>
            Project root element
            </summary>
        </member>
        <member name="F:Cake.Incubator.ProjectXElement.ItemGroup">
            <summary>
            Item group element
            </summary>
        </member>
        <member name="F:Cake.Incubator.ProjectXElement.Reference">
            <summary>
            Assembly reference element
            </summary>
        </member>
        <member name="F:Cake.Incubator.ProjectXElement.Import">
            <summary>
            Namespace import element
            </summary>
        </member>
        <member name="F:Cake.Incubator.ProjectXElement.Compile">
            <summary>
            Namespace compile element
            </summary>
        </member>
        <member name="F:Cake.Incubator.ProjectXElement.PropertyGroup">
            <summary>
            Namespace property group element
            </summary>
        </member>
        <member name="F:Cake.Incubator.ProjectXElement.RootNamespace">
            <summary>
            Namespace root namespace element
            </summary>
        </member>
        <member name="F:Cake.Incubator.ProjectXElement.OutputType">
            <summary>
            Namespace output type element
            </summary>
        </member>
        <member name="F:Cake.Incubator.ProjectXElement.OutputPath">
            <summary>
            Namespace output path element
            </summary>
        </member>
        <member name="F:Cake.Incubator.ProjectXElement.AssemblyName">
            <summary>
            Namespace assembly name element
            </summary>
        </member>
        <member name="F:Cake.Incubator.ProjectXElement.TargetFrameworkVersion">
            <summary>
            Gets the namespace for the target framework version element.
            </summary>
        </member>
        <member name="F:Cake.Incubator.ProjectXElement.TargetFrameworkProfile">
            <summary>
            Gets the namespace for the target framework version element.
            </summary>
        </member>
        <member name="F:Cake.Incubator.ProjectXElement.TargetFramework">
            <summary>
            Gets the target framework element.
            </summary>
        </member>
        <member name="F:Cake.Incubator.ProjectXElement.Configuration">
            <summary>
            Gets the namespace for the configuration element.
            </summary>
        </member>
        <member name="F:Cake.Incubator.ProjectXElement.Platform">
            <summary>
             Gets the namespace for the platform element.
            </summary>
        </member>
        <member name="F:Cake.Incubator.ProjectXElement.ProjectGuid">
            <summary>
            Gets the namespace for the project GUID.
            </summary>
        </member>
        <member name="F:Cake.Incubator.ProjectXElement.ProjectTypeGuids">
            <summary>
            Gets the namespace for the project type GUID.
            </summary>
        </member>
        <member name="F:Cake.Incubator.ProjectXElement.BootstrapperPackage">
            <summary>
            Gets the namespace for the bootstrapper package element.
            </summary>
        </member>
        <member name="F:Cake.Incubator.ProjectXElement.ProjectReference">
            <summary>
            Gets the namespace for the project reference element.
            </summary>
        </member>
        <member name="F:Cake.Incubator.ProjectXElement.Service">
            <summary>
            Gets the namespace for the service element.
            </summary>
        </member>
        <member name="F:Cake.Incubator.ProjectXElement.HintPath">
            <summary>
            Gets the namespace for the hint path element.
            </summary>
        </member>
        <member name="F:Cake.Incubator.ProjectXElement.Name">
            <summary>
            Gets the namespace for the name element.
            </summary>
        </member>
        <member name="F:Cake.Incubator.ProjectXElement.FusionName">
            <summary>
            Gets the namespace for the fusion name element.
            </summary>
        </member>
        <member name="F:Cake.Incubator.ProjectXElement.SpecificVersion">
            <summary>
            Gets the namespace for the specific version element.
            </summary>
        </member>
        <member name="F:Cake.Incubator.ProjectXElement.Aliases">
            <summary>
            Gets the namespace for the aliases element.
            </summary>
        </member>
        <member name="F:Cake.Incubator.ProjectXElement.Private">
            <summary>
            Gets the namespace for the private element.
            </summary>
        </member>
        <member name="F:Cake.Incubator.ProjectXElement.Package">
            <summary>
            Gets the namespace for the package element.
            </summary>
        </member>
        <member name="M:Cake.Incubator.SolutionParserExtensions.IsSolutionFolder(Cake.Common.Solution.SolutionProject)">
            <summary>
            Checks if a SolutionProject is of type SolutionFolder
            </summary>
            <param name="project">the solutionproject</param>
            <returns>true if the project is a solution folder</returns>
        </member>
        <member name="M:Cake.Incubator.SolutionParserExtensions.IsType(Cake.Common.Solution.SolutionProject,Cake.Incubator.ProjectType)">
            <summary>
            Checks the SolutionProject type
            </summary>
            <param name="project">The solutionproject</param>
            <param name="projectType">The type to check</param>
            <returns>true if the project type matches</returns>
        </member>
        <member name="M:Cake.Incubator.SolutionParserExtensions.GetProjects(Cake.Common.Solution.SolutionParserResult)">
            <summary>
            Gets the SolutionProjects, excluding any SolutionFolders
            </summary>
            <param name="projects">The SolutionProject collection</param>
            <returns>The SolutionProjects</returns>
        </member>
        <member name="M:Cake.Incubator.SolutionParserExtensions.GetAssemblyFilePath(Cake.Common.Solution.SolutionProject,Cake.Incubator.CustomProjectParserResult)">
            <summary>
            Gets the output assembly path for a SolutionProject
            </summary>
            <param name="solutionProject">The solutionproject</param>
            <param name="project">The parsed project</param>
            <returns>The SolutionProject output assembly path</returns>
        </member>
    </members>
</doc>
